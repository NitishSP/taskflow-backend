{
	"info": {
		"_postman_id": "taskflow-backend-collection",
		"name": "TaskFlow Backend API",
		"description": "Complete API collection for TaskFlow Backend with authentication endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health Check",
			"item": [
				{
					"name": "Root - API Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								""
							]
						},
						"description": "Get API information and available endpoints"
					},
					"response": []
				},
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/health",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"health"
							]
						},
						"description": "Check if the API is healthy and running"
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save access token to environment variable",
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.accessToken) {",
									"        pm.environment.set(\"ACCESS_TOKEN\", jsonData.data.accessToken);",
									"        console.log(\"Access token saved:\", jsonData.data.accessToken);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/auth/register",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						},
						"description": "Register a new user account. Returns access token and sets refresh token as httpOnly cookie."
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save access token to environment variable",
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.accessToken) {",
									"        pm.environment.set(\"ACCESS_TOKEN\", jsonData.data.accessToken);",
									"        console.log(\"Access token saved:\", jsonData.data.accessToken);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/auth/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login with email and password. Returns access token and sets refresh token as httpOnly cookie."
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save new access token to environment variable",
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.accessToken) {",
									"        pm.environment.set(\"ACCESS_TOKEN\", jsonData.data.accessToken);",
									"        console.log(\"New access token saved:\", jsonData.data.accessToken);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/auth/refresh",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"refresh"
							]
						},
						"description": "Refresh the access token using the refresh token stored in httpOnly cookie. Returns a new access token and refresh token."
					},
					"response": []
				},
				{
					"name": "Logout User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Clear access token from environment",
									"if (pm.response.code === 200) {",
									"    pm.environment.unset(\"ACCESS_TOKEN\");",
									"    console.log(\"Access token cleared\");",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/auth/logout",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"logout"
							]
						},
						"description": "Logout user and invalidate refresh token. Clears the refresh token cookie."
					},
					"response": []
				},
				{
					"name": "Get User Profile",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ACCESS_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/auth/profile",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"profile"
							]
						},
						"description": "Get the authenticated user's profile information. Requires valid access token in Authorization header."
					},
					"response": []
				}
			]
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Create Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save task ID for later use",
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.task && jsonData.data.task._id) {",
									"        pm.environment.set(\"TASK_ID\", jsonData.data.task._id);",
									"        console.log(\"Task ID saved:\", jsonData.data.task._id);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ACCESS_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Complete project documentation\",\n  \"description\": \"Write comprehensive documentation for the TaskFlow project\",\n  \"status\": \"todo\",\n  \"priority\": \"high\",\n  \"dueDate\": \"2025-10-30\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/tasks",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"tasks"
							]
						},
						"description": "Create a new task for the authenticated user. Requires access token."
					},
					"response": []
				},
				{
					"name": "Get All Tasks",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ACCESS_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/tasks",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"tasks"
							]
						},
						"description": "Get all tasks belonging to the authenticated user. Tasks are sorted by creation date (newest first)."
					},
					"response": []
				},
				{
					"name": "Get Task by ID",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ACCESS_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/tasks/{{TASK_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"tasks",
								"{{TASK_ID}}"
							]
						},
						"description": "Get a single task by its ID. Only returns task if it belongs to the authenticated user."
					},
					"response": []
				},
				{
					"name": "Update Task",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ACCESS_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Complete project documentation - Updated\",\n  \"status\": \"in-progress\",\n  \"priority\": \"medium\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/tasks/{{TASK_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"tasks",
								"{{TASK_ID}}"
							]
						},
						"description": "Update a task by its ID. Only updates fields that are provided. User can only update their own tasks."
					},
					"response": []
				},
				{
					"name": "Delete Task",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{ACCESS_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/tasks/{{TASK_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"tasks",
								"{{TASK_ID}}"
							]
						},
						"description": "Delete a task by its ID. User can only delete their own tasks."
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}
